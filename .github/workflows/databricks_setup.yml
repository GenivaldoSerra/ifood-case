name: "Databricks Setup (Secrets + Jobs)"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment do deploy'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'

permissions:
  id-token: write
  contents: read

jobs:
  databricks-setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # AWS OIDC authentication
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.NYC_TRIP_RECORD_OIDC_ROLE_ARN }}
          role-session-name: NycTripRecordOidcRole
          aws-region: ${{ vars.NYC_TRIP_RECORD_AWS_REGION }}

      # Rotate IAM access key
      - name: Rotate IAM access key
        id: rotate-access-key
        run: |
          USER_NAME="nyc-trip-record-databricks"

          echo "Listando access keys existentes..."
          EXISTING_KEYS=$(aws iam list-access-keys --user-name $USER_NAME | jq -r '.AccessKeyMetadata[].AccessKeyId')

          for KEY in $EXISTING_KEYS; do
            echo "Deletando access key antiga: $KEY"
            aws iam delete-access-key --user-name $USER_NAME --access-key-id $KEY
          done

          echo "Criando nova access key..."
          ACCESS_JSON=$(aws iam create-access-key --user-name $USER_NAME)
          ACCESS_KEY=$(echo $ACCESS_JSON | jq -r '.AccessKey.AccessKeyId')
          SECRET_KEY=$(echo $ACCESS_JSON | jq -r '.AccessKey.SecretAccessKey')

          echo "access_key=$ACCESS_KEY" >> $GITHUB_OUTPUT
          echo "secret_key=$SECRET_KEY" >> $GITHUB_OUTPUT

      # Create Databricks secrets
      - name: Create Databricks secrets
        env:
          DATABRICKS_HOST: ${{ vars.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          curl -s -X POST "$DATABRICKS_HOST/api/2.0/secrets/scopes/create" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            -d '{"scope": "nyc-trip-record"}' || echo "Scope may already exist"

          curl -s -X POST "$DATABRICKS_HOST/api/2.0/secrets/put" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            -d "{\"scope\": \"nyc-trip-record\", \"key\": \"aws-access-key\", \"string_value\": \"${{ steps.rotate-access-key.outputs.access_key }}\"}"

          curl -s -X POST "$DATABRICKS_HOST/api/2.0/secrets/put" \
            -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            -d "{\"scope\": \"nyc-trip-record\", \"key\": \"aws-secret-key\", \"string_value\": \"${{ steps.rotate-access-key.outputs.secret_key }}\"}"
